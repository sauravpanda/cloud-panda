Ingestion Pipeline
The Ingestion Pipeline is responsible for processing incoming documents and converting them into plaintext format. It supports various data types such as TXT, JSON, HTML, and PDF.

Basic Ingestion Pipeline
The BasicIngestionPipeline is a simple implementation of the IngestionPipeline abstract base class. It provides a straightforward way to process documents based on their data type and yields BasicDocument objects.

Supported Data Types
The BasicIngestionPipeline supports the following data types:

TXT: Plain text format
JSON: JavaScript Object Notation format
HTML: Hypertext Markup Language format
PDF: Portable Document Format
Processing Data
The process_data method is the core of the ingestion pipeline. It takes the entry_type and entry_data as input, processes the data based on its type, and yields BasicDocument objects. It calls the appropriate parsing method for each supported data type.

Parsing Entry
The parse_entry method is a wrapper around the process_data method. It takes the entry_type and entry_data as input, processes the data, and yields the resulting BasicDocument objects.

Custom Ingestion Pipeline
The CustomIngestionPipeline is a custom implementation of the IngestionPipeline that inherits from the BasicIngestionPipeline class. It overrides the _parse_html method to use the unstructured.io library for parsing HTML documents.

from r2r.pipelines import BasicIngestionPipeline
from unstructured import partition_html
 
class CustomIngestionPipeline(BasicIngestionPipeline):
    def __init__(self, logging_connection=None):
        super().__init__(logging_connection)
 
    def _parse_html(self, data: str) -> Iterator[BasicDocument]:
        """
        Override the _parse_html method to use unstructured.io for parsing HTML.
        """
        document_elements = partition_html(text=data)
        text = ""
        for element in document_elements:
            if isinstance(element, (HTMLTitle, HTMLNarrativeText)):
                text += element.text + "\n"
        yield BasicDocument(text=text, metadata={})
In this custom implementation, we override the _parse_html method to use the partition_html function from the unstructured.io library for parsing HTML documents. The extracted text is yielded as a BasicDocument object.

Initialization
The CustomIngestionPipeline is initialized with the same parameters as the BasicIngestionPipeline.

Pipeline Execution
The run method from the base class (BasicIngestionPipeline) is used to execute the ingestion pipeline. It processes the incoming documents, yields the resulting BasicDocument objects, and uses the overridden _parse_html method for HTML parsing.

Passing the Custom Ingestion Pipeline to the Factory
To use the CustomIngestionPipeline with the E2EPipelineFactory, you can pass it when creating the pipeline:

from r2r.main import E2EPipelineFactory
from my_custom_pipeline import CustomIngestionPipeline
 
app = E2EPipelineFactory.create_pipeline(
    config=config,
    ingestion_pipeline_impl=CustomIngestionPipeline,
)
By passing the CustomIngestionPipeline to the create_pipeline method using the ingestion_pipeline_impl parameter, the factory will use the custom pipeline instead of the default BasicIngestionPipeline.

That's it! You now have a custom ingestion pipeline that uses the unstructured.io library for parsing HTML documents and can be passed to the E2EPipelineFactory for use in the end-to-end pipeline.

