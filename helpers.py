import requests
import os
import uuid
import prompts
import r2r_client
from llm import generate_llm_resp
import json
import asyncio
repo_owner = 'sauravpanda'
repo_name = 'messy-application'


def clone_repo(access_token):
    api_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/zipball"

    # Set the access token in the request headers
    headers = {
        "Authorization": f"token {access_token}",
        "Accept": "application/vnd.github.v3+json"
    }

    # Send a GET request to the API endpoint
    response = requests.get(api_url, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        # Extract the repository name from the response headers
        repo_name = response.headers["Content-Disposition"].split("filename=")[1].split(".")[0]

        folder_name = str(uuid.uuid4())
        # Save the repository ZIP file
        with open(f"/var/{repo_name}.zip", "wb") as file:
            file.write(response.content)
        print(f"Repository '{repo_name}' cloned successfully.")
    else:
        print("Failed to clone the repository.")
    return folder_name


def reply_to_comment(payload, access_token):
    repo_owner = payload['repository']['owner']['login']
    repo_name = payload['repository']['name']
    issue_number = payload['issue']['number']
    comment_id = payload['comment']['id']
    comment_body = payload['comment']['body']

    # Send a reply to the comment using the GitHub API
    reply_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/issues/comments/{comment_id}'
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    data = {
        'body': f'Thank you for your comment: "{comment_body}".I will start looking at it!'
    }
    print(reply_url)
    response = requests.post(reply_url, headers=headers, json=data)

    if response.status_code == 201:
        print('Reply posted successfully')
    else:
        print('Failed to post reply')
        print("error", response.text)


def create_files(payload, access_token):
    pass

def document_code(payload, access_token):
    pass

async  def review_code(payload, access_token):
    print("Inside code review")
    comment_url = payload["pull_request"]["comments_url"]
    diff_url = payload["pull_request"]["diff_url"]
    html_url = payload["pull_request"]["html_url"]

    tips = r2r_client.filtered_search("What are some tips to remember while doing code review?", 5, {"tags": "tips"})
    tips_to_text = "\n-->".join([t['metadata']['text'] for t in tips])

    prompt = prompts.REVIEW_CODE.format(
        context=payload["pull_request"]["body"],
        inst = tips_to_text,
        code = get_text_from_html_url(diff_url, access_token)
    )
    print("Outgoing Prompt:", prompt)
    resp = generate_llm_resp(prompt)

    body = json_to_markdown(extract_json(resp))
    data = {
        "body": f"## Here is my AI generated review.\n {body}\n\n -- Generated by Cloud Panda"
    }

    response = requests.post(comment_url, headers=headers, json=data)



def json_to_markdown(data):
    markdown_output = "## Code Review Feedback\n\n"

    for category, comments in data['review'].items():
        markdown_output += f"### {category}\n\n"
        for comment in comments:
            markdown_output += f"- {comment}\n"
        markdown_output += "\n"

    markdown_output += "In summary, the main issues with the provided code are the hardcoded API key, lack of testing, and missing error handling. Addressing these issues will improve the security, reliability, and maintainability of the code."

    # Print the markdown output
    return markdown_output


def extract_json(text):
    # Find the start and end positions of the JSON data
    start_index = text.find("{")
    end_index = text.rfind("}") + 1

    # Extract the JSON data from the text
    json_data = text[start_index:end_index]

    # Parse the JSON data
    parsed_data = json.loads(json_data)
    return parsed_data


def get_text_from_html_url(url, access_token):
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    response = requests.get(url, headers=headers)
    return response.text